//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);
    
    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer1->Add(m_mainPanel, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_name_File = new wxMenu();
    m_menuBar->Append(m_name_File, _("File"));
    
    m_menuItem_Trig = new wxMenuItem(m_name_File, wxID_ANY, _("Funciones trigonometricas\tCtrl+T"), wxT(""), wxITEM_NORMAL);
    m_name_File->Append(m_menuItem_Trig);
    
    m_menuItem_Exp = new wxMenuItem(m_name_File, wxID_ANY, _("Funciones exponenciales\tCtrl+E"), wxT(""), wxITEM_NORMAL);
    m_name_File->Append(m_menuItem_Exp);
    
    m_menuItem_Log = new wxMenuItem(m_name_File, wxID_ANY, _("Funciones logaritmicas\tCtrl+L"), wxT(""), wxITEM_NORMAL);
    m_name_File->Append(m_menuItem_Log);
    
    m_menuItemHip = new wxMenuItem(m_name_File, wxID_ANY, _("Funciones hiperbolicas\tCtrl+H"), wxT(""), wxITEM_NORMAL);
    m_name_File->Append(m_menuItemHip);
    
    m_menuItem_Otras = new wxMenuItem(m_name_File, wxID_ANY, _("Otras funciones matematicas\tCtrl+O"), wxT(""), wxITEM_NORMAL);
    m_name_File->Append(m_menuItem_Otras);
    
    m_menuItem_Exit = new wxMenuItem(m_name_File, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name_File->Append(m_menuItem_Exit);
    
    m_name_Help = new wxMenu();
    m_menuBar->Append(m_name_Help, _("Help"));
    
    m_menuItem_About = new wxMenuItem(m_name_Help, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_name_Help->Append(m_menuItem_About);
    
    m_mainToolbar = this->CreateToolBar(wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16,16));
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItem_Trig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemTrig_Selected), NULL, this);
    this->Connect(m_menuItem_Exp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemExp_Selected), NULL, this);
    this->Connect(m_menuItem_Log->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemLog), NULL, this);
    this->Connect(m_menuItemHip->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemHip_Selected), NULL, this);
    this->Connect(m_menuItem_Otras->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemOtrasSelected), NULL, this);
    this->Connect(m_menuItem_Exit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem_About->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItem_Trig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemTrig_Selected), NULL, this);
    this->Disconnect(m_menuItem_Exp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemExp_Selected), NULL, this);
    this->Disconnect(m_menuItem_Log->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemLog), NULL, this);
    this->Disconnect(m_menuItemHip->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemHip_Selected), NULL, this);
    this->Disconnect(m_menuItem_Otras->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnMenuItemOtrasSelected), NULL, this);
    this->Disconnect(m_menuItem_Exit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem_About->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

TrigonometricasBaseClass::TrigonometricasBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer17 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer17);
    
    m_panel19 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer17->Add(m_panel19, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer21 = new wxGridSizer(8, 2, 0, 0);
    m_panel19->SetSizer(gridSizer21);
    
    m_staticText23 = new wxStaticText(m_panel19, wxID_ANY, _("Para un angulo de grados"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText23, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_spinCtrl_Angulo = new wxSpinCtrl(m_panel19, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), wxSP_WRAP|wxSP_ARROW_KEYS);
    m_spinCtrl_Angulo->SetToolTip(_("Introducir un angulo en grados"));
    m_spinCtrl_Angulo->SetRange(0, 360);
    m_spinCtrl_Angulo->SetValue(0);
    
    gridSizer21->Add(m_spinCtrl_Angulo, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticText_sin_lbl = new wxStaticText(m_panel19, wxID_ANY, _("sin()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_sin_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_sin_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_sin_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_cos_lbl = new wxStaticText(m_panel19, wxID_ANY, _("cos()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_cos_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_cos_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_cos_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_tan_lbl = new wxStaticText(m_panel19, wxID_ANY, _("tan()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_tan_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_tan_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_tan_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_asin_lbl = new wxStaticText(m_panel19, wxID_ANY, _("asin()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_asin_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_asin_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_asin_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_acos_lbl = new wxStaticText(m_panel19, wxID_ANY, _("acos()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_acos_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_acos_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_acos_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_atan_lbl = new wxStaticText(m_panel19, wxID_ANY, _("atan()"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_atan_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_atan_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_atan_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_atan2_lbl = new wxStaticText(m_panel19, wxID_ANY, _("atan(x/2)"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_atan2_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_atan2_value = new wxStaticText(m_panel19, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel19, wxSize(-1,-1)), 0);
    
    gridSizer21->Add(m_staticText_atan2_value, 1, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer55 = new wxStdDialogButtonSizer();
    
    boxSizer17->Add(m_stdBtnSizer55, 0, wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_button_CLOSE = new wxButton(this, wxID_CLOSE, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer55->AddButton(m_button_CLOSE);
    m_stdBtnSizer55->Realize();
    
    SetName(wxT("TrigonometricasBaseClass"));
    SetSize(500,500);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_spinCtrl_Angulo->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(TrigonometricasBaseClass::OnAnguloChanged), NULL, this);
    m_button_CLOSE->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TrigonometricasBaseClass::OnCloseTrigon), NULL, this);
    
}

TrigonometricasBaseClass::~TrigonometricasBaseClass()
{
    m_spinCtrl_Angulo->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(TrigonometricasBaseClass::OnAnguloChanged), NULL, this);
    m_button_CLOSE->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TrigonometricasBaseClass::OnCloseTrigon), NULL, this);
    
}

ExponencialesBaseClass::ExponencialesBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer61 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer61);
    
    m_panel63 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer61->Add(m_panel63, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer69 = new wxGridSizer(5, 2, 0, 0);
    m_panel63->SetSizer(gridSizer69);
    
    m_staticText_argu_x = new wxStaticText(m_panel63, wxID_ANY, _("Argumento x de la funcion que lo requiera"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    
    gridSizer69->Add(m_staticText_argu_x, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_argu_x = new wxTextCtrl(m_panel63, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_argu_x->SetHint(wxT(""));
    #endif
    
    gridSizer69->Add(m_textCtrl_argu_x, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_argu_y = new wxStaticText(m_panel63, wxID_ANY, _("Argumento y de la funcion que lo requiera"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    
    gridSizer69->Add(m_staticText_argu_y, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_argu_y = new wxTextCtrl(m_panel63, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_argu_y->SetHint(wxT(""));
    #endif
    
    gridSizer69->Add(m_textCtrl_argu_y, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_exp_lbl = new wxStaticText(m_panel63, wxID_ANY, _("double exp(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    m_staticText_exp_lbl->SetToolTip(_("Regresa el exponente natural del argumento x"));
    
    gridSizer69->Add(m_staticText_exp_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_exp_res = new wxStaticText(m_panel63, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    
    gridSizer69->Add(m_staticText_exp_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_frexp_lbl = new wxStaticText(m_panel63, wxID_ANY, _("double frexp(double x, int *y)"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    m_staticText_frexp_lbl->SetToolTip(_("Calcula la funcion normalizada"));
    
    gridSizer69->Add(m_staticText_frexp_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_frexp_res = new wxStaticText(m_panel63, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    
    gridSizer69->Add(m_staticText_frexp_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_ldexp_lbl = new wxStaticText(m_panel63, wxID_ANY, _("double ldexp(double x, int y)"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    m_staticText_ldexp_lbl->SetToolTip(_("Regresa x * 2y"));
    
    gridSizer69->Add(m_staticText_ldexp_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_ldexp_res = new wxStaticText(m_panel63, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel63, wxSize(-1,-1)), 0);
    
    gridSizer69->Add(m_staticText_ldexp_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer65 = new wxStdDialogButtonSizer();
    
    boxSizer61->Add(m_stdBtnSizer65, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_buttonClose = new wxButton(this, wxID_CLOSE, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer65->AddButton(m_buttonClose);
    
    m_buttonApply = new wxButton(this, wxID_APPLY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonApply->SetToolTip(_("Calcula el resultado de las funciones."));
    m_buttonApply->SetToolTip(_("Calcula el resultado de las funciones."));
    m_stdBtnSizer65->AddButton(m_buttonApply);
    m_stdBtnSizer65->Realize();
    
    SetName(wxT("ExponencialesBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponencialesBaseClass::OnCloseExp), NULL, this);
    m_buttonApply->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponencialesBaseClass::OnApplyExp), NULL, this);
    
}

ExponencialesBaseClass::~ExponencialesBaseClass()
{
    m_buttonClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponencialesBaseClass::OnCloseExp), NULL, this);
    m_buttonApply->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponencialesBaseClass::OnApplyExp), NULL, this);
    
}

LogaritmicasBaseClass::LogaritmicasBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer95 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer95);
    
    m_panel97 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer95->Add(m_panel97, 0, 0, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer103 = new wxGridSizer(3, 2, 0, 0);
    m_panel97->SetSizer(gridSizer103);
    
    m_staticText_argu = new wxStaticText(m_panel97, wxID_ANY, _("Argumento de la funcion"), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    
    gridSizer103->Add(m_staticText_argu, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_argu = new wxTextCtrl(m_panel97, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_argu->SetHint(wxT(""));
    #endif
    
    gridSizer103->Add(m_textCtrl_argu, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_log_lbl = new wxStaticText(m_panel97, wxID_ANY, _("double log(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    
    gridSizer103->Add(m_staticText_log_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_log_res = new wxStaticText(m_panel97, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    
    gridSizer103->Add(m_staticText_log_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_log10_lbl = new wxStaticText(m_panel97, wxID_ANY, _("double log10(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    
    gridSizer103->Add(m_staticText_log10_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_log10_res = new wxStaticText(m_panel97, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel97, wxSize(-1,-1)), 0);
    
    gridSizer103->Add(m_staticText_log10_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer99 = new wxStdDialogButtonSizer();
    
    boxSizer95->Add(m_stdBtnSizer99, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_button101 = new wxButton(this, wxID_CLOSE, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer99->AddButton(m_button101);
    m_stdBtnSizer99->Realize();
    
    SetName(wxT("LogaritmicasBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_textCtrl_argu->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(LogaritmicasBaseClass::OnArgumentoChanged), NULL, this);
    m_button101->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LogaritmicasBaseClass::OnClose), NULL, this);
    
}

LogaritmicasBaseClass::~LogaritmicasBaseClass()
{
    m_textCtrl_argu->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(LogaritmicasBaseClass::OnArgumentoChanged), NULL, this);
    m_button101->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LogaritmicasBaseClass::OnClose), NULL, this);
    
}

HiperbolicasBaseClass::HiperbolicasBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer121 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer121);
    
    m_panel123 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer121->Add(m_panel123, 0, 0, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer125 = new wxGridSizer(4, 2, 0, 0);
    m_panel123->SetSizer(gridSizer125);
    
    m_staticText135 = new wxStaticText(m_panel123, wxID_ANY, _("Argumento de la funcion"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText135, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_argu = new wxTextCtrl(m_panel123, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_argu->SetHint(wxT(""));
    #endif
    
    gridSizer125->Add(m_textCtrl_argu, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_cosh_lbl = new wxStaticText(m_panel123, wxID_ANY, _("double cosh(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_cosh_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_cosh_res = new wxStaticText(m_panel123, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_cosh_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_sinh_lbl = new wxStaticText(m_panel123, wxID_ANY, _("double sinh(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_sinh_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_sinh_res = new wxStaticText(m_panel123, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_sinh_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_tanh_lbl = new wxStaticText(m_panel123, wxID_ANY, _("double tanh(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_tanh_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_tanh_res = new wxStaticText(m_panel123, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel123, wxSize(-1,-1)), 0);
    
    gridSizer125->Add(m_staticText_tanh_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer131 = new wxStdDialogButtonSizer();
    
    boxSizer121->Add(m_stdBtnSizer131, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_buttonClose = new wxButton(this, wxID_CLOSE, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer131->AddButton(m_buttonClose);
    m_stdBtnSizer131->Realize();
    
    SetName(wxT("HiperbolicasBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_textCtrl_argu->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(HiperbolicasBaseClass::OnArgumentoChanged), NULL, this);
    m_buttonClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HiperbolicasBaseClass::OnClose), NULL, this);
    
}

HiperbolicasBaseClass::~HiperbolicasBaseClass()
{
    m_textCtrl_argu->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(HiperbolicasBaseClass::OnArgumentoChanged), NULL, this);
    m_buttonClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HiperbolicasBaseClass::OnClose), NULL, this);
    
}

OtrasBaseClass::OtrasBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer157 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer157);
    
    m_panel159 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer157->Add(m_panel159, 0, 0, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer167 = new wxGridSizer(10, 2, 0, 0);
    m_panel159->SetSizer(gridSizer167);
    
    m_staticText169 = new wxStaticText(m_panel159, wxID_ANY, _("Argumento x"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText169, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrlArgu_x = new wxTextCtrl(m_panel159, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlArgu_x->SetHint(wxT(""));
    #endif
    
    gridSizer167->Add(m_textCtrlArgu_x, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText173 = new wxStaticText(m_panel159, wxID_ANY, _("Argumento y"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText173, 0, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrlArgu_y = new wxTextCtrl(m_panel159, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlArgu_y->SetHint(wxT(""));
    #endif
    
    gridSizer167->Add(m_textCtrlArgu_y, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_sqrt_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double sqrt(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_sqrt_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_sqrt_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_sqrt_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_ceil_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double ceil(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_ceil_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_ceil_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_ceil_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_abs_lbl = new wxStaticText(m_panel159, wxID_ANY, _("int abs(int x)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_abs_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_abs_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_abs_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_labs_lbl = new wxStaticText(m_panel159, wxID_ANY, _("long int labs(long int x)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_labs_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_labs_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_labs_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_floor_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double floor(double x)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_floor_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_floor_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_floor_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_modf_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double modf(double x, double *y)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_modf_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_modf_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_modf_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_pow_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double pow(double x, double y)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_pow_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_pow_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_pow_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_fmod_lbl = new wxStaticText(m_panel159, wxID_ANY, _("double fmod(double x, double y)"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_fmod_lbl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText_fmod_res = new wxStaticText(m_panel159, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panel159, wxSize(-1,-1)), 0);
    
    gridSizer167->Add(m_staticText_fmod_res, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer161 = new wxStdDialogButtonSizer();
    
    boxSizer157->Add(m_stdBtnSizer161, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_buttonClose = new wxButton(this, wxID_CLOSE, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer161->AddButton(m_buttonClose);
    
    m_buttonApply = new wxButton(this, wxID_APPLY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer161->AddButton(m_buttonApply);
    m_stdBtnSizer161->Realize();
    
    SetName(wxT("OtrasBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OtrasBaseClass::OnCloseClick), NULL, this);
    m_buttonApply->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OtrasBaseClass::OnApplyClick), NULL, this);
    
}

OtrasBaseClass::~OtrasBaseClass()
{
    m_buttonClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OtrasBaseClass::OnCloseClick), NULL, this);
    m_buttonApply->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OtrasBaseClass::OnApplyClick), NULL, this);
    
}
